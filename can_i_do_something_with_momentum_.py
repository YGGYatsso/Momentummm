# -*- coding: utf-8 -*-
"""can I do something with momentum .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MixmdSGmYpLByTt_v-Op4xXC1kEy7esG
"""

import numpy as np
import pandas as pd
import yfinance as yfin
from datetime import date,timedelta
from monthdelta import monthdelta
#lets only use bse stock price data for a company
# as I am looking for top 200 companies in indian indices , these companies must be listed on both
#bombay stock exchange and national stock exchange

#nifty200

def perc_return(nifty200,companies,start,end):
  """
  nifty200 :provides list of symbols for top 200 nifty companies.
  companies provides list of top 200 nifty companies.
  start refers to initial date of holding period.
  end refers to final date  of holding period.

  """
  val=[]
  names=[]

  for i in range(len(nifty200)):
    name=nifty200[i]+".BO"
    data=yfin.download(name,start=start , end= end) # J-1 months of holding.
    # for customs date one can give parameter to start and end variables .


    if len(data)==0:
      name=nifty200[i]+".NS" # trying to fectch data from national stock exchange
      data=yfin.download(name,start=start  , end=end)
      # for end date parameter keep the value one day ahead of last date .

    #print(len(data))
    # if the company  data is not present on both then flag it
    assert len(data ) !=0 ,"check if the name is correct or company is  listed or not"

    # data is  already sorted based on increasing trading dates.
    final=data.tail(1) # close
    initial=data.head(1) #open
    #print(name,final,initial,"\n")
    value=final["Close"].iloc[0]/initial["Open"].iloc[0] -1
    val.append(value)
    #adding the name of exchange where the particular company is listed.
    names.append(name)


  df=pd.DataFrame(val,companies,["return"])
  df['Symbol']=nifty200
  df['exchange']=names
  return  df



def variance_perday(returnDF,exchange,start,end):
  """
  returnDF is the dataframe provided by perc_return function
  exchange is the list of exchnages from where past stock price data is fetched.
  """
  # here i need to make some changes .. some more finer level structuring .
  val=[]
  for i in range(len(exchange)):
    data=yfin.download(exchange[i],start=start , end=end)
    # no need to provide end date parameter higher . that's fine !!
    #collect=[]
    let=data["Close"].to_list()
    let.insert(0,data["Open"].iloc[0])
    data["numer"]=let[:-1]
    data['perday']=data['Close']/data["numer"] -1

    volatility=np.std(np.array(data["perday"].to_list()))
    val.append(volatility)

    assert volatility !=0 , "variance in stock price can't be zero"


  returnDF['volatile']=val
  return returnDF



def finalset(  data,param,nifty100,size=15  ):
  """
  data is the pandas dataframe containing the return and volatility for each companies
  param is the list of column names based on which we will sort the data
  nifty100 is the list of all companies which are in nifty100
  """
  Df={}
  for i in param:
    Df[i]=data.sort_values(i,ascending=False).head(size)

  # I want to label them whether they are
  # I am only labelling between midcap or largecap
  # because my base universe is not  going to include smallcaps
  # applying absolute momentum to them is not fair I feel !!!!!!!! mehhhh just my thoughts !!!! mehhhh
  for key in Df.keys():
    table=Df[key]
    companylist=table.index
    add=[]
    for company in companylist:
      if company in nifty100:
        add.append("largecap")
      else:
        add.append("midcap")
    Df[key]["label"]=add

  return Df

def together(start, end , nifty200,companies,holding_period=6, returns =1.0,size=15):
  # start refers to starting month of investing .
  # end refers to last month of investing .
  # holding period refers to length of month wise data for building portfolio
  # return

  #holding period-1 months of data is analysed
  initial=start-monthdelta(holding_period)
  final=start-monthdelta(1)
  data=perc_return(nifty200,companies,initial,final)
  exchange=data['exchange'].to_list()
  data2=variance_perday(data,exchange,initial,final)
  # now data2 contains companies based return , exchange names , volatility in that period.
  final=data2.sort_values("return",ascending=False).head(size)
  #now we have the datasheet
  sum=0.0
  for i in range(size):
    exc=final.iloc[i]['exchange']
    take=yfin.download(exc,start,end+timedelta(1))
    first=take.head(1).iloc[0]['Open']
    last=take.tail(1).iloc[0]['Open']
    sum=sum+(last/first)

  sum=sum/size  # currently all stocks are assumed to be equiweighted

  return (sum) # return in decimal

def backtest(start,end,nifty200,companies,holding_period=6,investment_period=12,returns=1.0,size=15):
  # investing period is in months
  #holding period is in months
  #end variable is redundant ?? hmmmmmm
  mul=1.0
  for i in range(investment_period):
    ret=together(start,end,nifty200,companies,holding_period)
    start=start+monthdelta(1)
    mul=mul*ret

    print(mul-1.0) # total returns at the end of each month

  return mul-1.0

# test for final output
#nifty200=pd.read_csv("/content/ind_nifty200list.csv")
#out=perc_return(nifty200["Symbol"].to_list(),nifty200["Company Name"].to_list(),date(2023, 1, 3),date(2023, 2, 3))
#let=variance_perday(out,out["exchange"].to_list(),date(2023,1,3),date(2023,2,3))
#let["volatile+adjusted_return"]=let["return"]/let["volatile"]